<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ResearchBase</name>
    </assembly>
    <members>
        <member name="T:ResearchBase.INameAndCopy">
            <summary>
            interface INameAndCopy
            consist of:
            string Name { get; set; }
            object DeepCopy();
            </summary>
        </member>
        <member name="M:ResearchBase.Lab1.Run">
            <summary>
            done tasks from lab 1
            </summary>
        </member>
        <member name="M:ResearchBase.Lab2.Run">
            <summary>
            done tasks from lab 1
            </summary>
        </member>
        <member name="T:ResearchBase.Paper">
            <summary>
            Paper, with fields title, author and date of publication
            </summary>
        </member>
        <member name="P:ResearchBase.Paper.Title">
            <value>get/set title</value>
        </member>
        <member name="P:ResearchBase.Paper.Author">
            <value>get/set author</value>
        </member>
        <member name="P:ResearchBase.Paper.PublicationDate">
            <value>get/set date of publication</value>
        </member>
        <member name="M:ResearchBase.Paper.#ctor(System.String,ResearchBase.Person,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="_title">title of paper</param>
            <param name="_author">author of paper</param>
            <param name="_publicationDate">date of publication of paper</param>
        </member>
        <member name="M:ResearchBase.Paper.#ctor">
            <summary>
            default constructor Paper("Title", new Person(), DateTime.MinValue)
            </summary>
        </member>
        <member name="M:ResearchBase.Paper.ToString">
            <summary>
            convert fields of paper in string
            </summary>
            <returns>string with title, author and date of publication</returns>
        </member>
        <member name="M:ResearchBase.Paper.DeepCopy">
            <summary>
            Copy by value
            </summary>
            <returns>object with common fields as this</returns>
        </member>
        <member name="M:ResearchBase.Paper.CompareTo(System.Object)">
            <summary>
            compare by publication date
            </summary>
            <param name="obj">compared object</param>
            <exception cref="T:System.Exception">Невозможно сравнить два объекта</exception>
            <returns>this.PublicationDate.CompareTo(obj.PublicationDate)</returns>
        </member>
        <member name="T:ResearchBase.PaperIComparer">
            <summary>
            class for realise IComparer^Paper^ to compare vy author's surname
            </summary>
        </member>
        <member name="T:ResearchBase.Person">
            <summary>
            Person, with fields name, surname and birthdate
            </summary>
        </member>
        <member name="M:ResearchBase.Person.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="_name">name of person</param>
            <param name="_surname">surname of person</param>
            <param name="_birthdate">birthdate of person</param>
            <remarks>if birthdate not in (DateTime.MinValue; DateTime.Now] than set DateTime.MinValue </remarks>
        </member>
        <member name="M:ResearchBase.Person.#ctor">
            <summary>
            default constructor Person("Name","Surname",DateTime.MinValue)
            </summary>
        </member>
        <member name="P:ResearchBase.Person.Name">
            <value>get/set name</value>
        </member>
        <member name="P:ResearchBase.Person.Surname">
            <value>get/set surname</value>
        </member>
        <member name="P:ResearchBase.Person.Birthdate">
            <value>get/set birthdate</value>
            <remarks>set only if in (DateTime.MinValue; DateTime.Now] </remarks>
        </member>
        <member name="P:ResearchBase.Person.BirthdayYear">
            <value>get/set birthyear</value>
        </member>
        <member name="M:ResearchBase.Person.ToString">
            <summary>
            convert fields of person in string
            </summary>
            <returns>string with name, surname and birthdate </returns>
        </member>
        <member name="M:ResearchBase.Person.ToShortString">
            <summary>
            convert some fields of person in string
            </summary>
            <returns>string with name and surname</returns>
        </member>
        <member name="M:ResearchBase.Person.Equals(System.Object)">
            <summary>
            return true (so they are equal) if this and obj are common by value
            </summary>
            <param name="obj">compared obj - should be Person-type</param>
            <returns>true if obj.type - Person and fields are common by value
            else false </returns>
        </member>
        <member name="M:ResearchBase.Person.op_Equality(ResearchBase.Person,System.Object)">
            <summary>
            compare by equals
            </summary>
            <param name="left"> left value</param>
            <param name="right"> right value </param>
            <returns>left.Equals(right)</returns>
        </member>
        <member name="M:ResearchBase.Person.op_Inequality(ResearchBase.Person,System.Object)">
            <summary>
            compare by unequals
            </summary>
            <param name="left"> left value</param>
            <param name="right"> right value </param>
            <returns>!(left.Equals(right))</returns>
        </member>
        <member name="M:ResearchBase.Person.GetHashCode">
            <summary>
            override GetHashCode
            </summary>
            <returns>(name+surname).GetHashCode() + birthdate.GetHashCode()</returns>
        </member>
        <member name="M:ResearchBase.Person.DeepCopy">
            <summary>
            Copy by value
            </summary>
            <returns>object with common fields as this</returns>
        </member>
        <member name="T:ResearchBase.ResearchTeam">
            <summary>
            Research team
            </summary>
        </member>
        <member name="M:ResearchBase.ResearchTeam.#ctor(System.String,ResearchBase.Team,ResearchBase.TimeFrame)">
            <summary>
            Constructor
            </summary>
            <param name="_theme">theme of research</param>
            <param name="_team">reseacher team</param>
            <param name="_timeFrame">time frame of research</param>
            <remarks>if _registerNumber not in (100000;999999] than set 100000</remarks>
        </member>
        <member name="M:ResearchBase.ResearchTeam.#ctor">
            <summary>
            default constructor ResearchTeam("theme", new Team("company", 1000000), TimeFrame.Year)
            </summary>
        </member>
        <member name="P:ResearchBase.ResearchTeam.Theme">
            <value>get/set theme of research</value>
        </member>
        <member name="P:ResearchBase.ResearchTeam.TimeFrame">
            <value>get/set time frame of research</value>
        </member>
        <member name="P:ResearchBase.ResearchTeam.Papers">
            <value>get/set papers</value>
        </member>
        <member name="P:ResearchBase.ResearchTeam.LastPaper">
            <value>get paper with last publication date</value>
        </member>
        <member name="P:ResearchBase.ResearchTeam.Item(ResearchBase.TimeFrame)">
            <summary>
            indexator by TimeFrame
            </summary>
            <param name="index">current timeframe index</param>
            <returns>return true if timeframe == index</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeam.AddPapers(ResearchBase.Paper[])">
            <summary>
            add some papers to current papers
            </summary>
            <param name="addPapers">papers that added</param>
        </member>
        <member name="M:ResearchBase.ResearchTeam.ToString">
            <summary>
            convert fields of research team in string
            </summary>
            <returns>string with theme, company, register number, timeframe and papers</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeam.ToShortString">
            <summary>
            convert some fields of research team in string
            </summary>
            <returns>string with theme, company, register number and time frame</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeam.DeepCopy">
            <summary>
            Copy by value
            </summary>
            <returns>object with common fields as this</returns>
        </member>
        <member name="P:ResearchBase.ResearchTeam.Persons">
            <value>get/set persons</value>
        </member>
        <member name="M:ResearchBase.ResearchTeam.AddPersons(ResearchBase.Person[])">
            <summary>
            add some papers to current persons
            </summary>
            <param name="addPersons">persons that added</param>
        </member>
        <member name="P:ResearchBase.ResearchTeam.Team">
            <value>get/set team</value>
        </member>
        <member name="M:ResearchBase.ResearchTeam.GetEnumerator">
            <summary>
            Enumerator for persons with non-publications
            </summary>
            <returns>person without publication</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeam.GetEnumerator(System.Int32)">
            <summary>
            Enumerator for publication which publicated in last n years
            </summary>
            <param name="n">count of last years</param>
            <returns>publication in last n years</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeam.GetPersonsWithPubs">
            <summary>
            Enumerator for search persons who have publications
            </summary>
            <returns>persons with publications</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeam.SortByDate">
            <summary>
            sort by publication date
            </summary>
        </member>
        <member name="M:ResearchBase.ResearchTeam.SortByName">
            <summary>
            sort by title
            </summary>
        </member>
        <member name="M:ResearchBase.ResearchTeam.SortByAuthorSnm">
            <summary>
            sort by author's surname
            </summary>
        </member>
        <member name="T:ResearchBase.ResearchTeamCollection`1">
            <summary>
            Dictionary collection of research team
            </summary>
            <typeparam name="TKey">type of key in dictionary</typeparam>
        </member>
        <member name="M:ResearchBase.ResearchTeamCollection`1.#ctor(ResearchBase.KeySelector{`0})">
            <summary>
            Constructor
            </summary>
            <param name="_keySelector">key selector</param>
        </member>
        <member name="M:ResearchBase.ResearchTeamCollection`1.AddDefault">
            <summary>
            add new ResearchTeam() in dictionary 
            </summary>
        </member>
        <member name="M:ResearchBase.ResearchTeamCollection`1.AddResearchTeams(ResearchBase.ResearchTeam[])">
            <summary>
            add some research teams in dictionary
            </summary>
            <param name="addResearchTeam">added research teams</param>
        </member>
        <member name="M:ResearchBase.ResearchTeamCollection`1.ToString">
            <summary>
            convert fields of dictionary in string
            </summary>
            <returns>string with title, author and date of publication</returns>
        </member>
        <member name="M:ResearchBase.ResearchTeamCollection`1.ToShortString">
            <summary>
            convert some fields of dictionary in string
            </summary>
            <returns>string with name and surname</returns>
        </member>
        <member name="P:ResearchBase.ResearchTeamCollection`1.LastPublication">
            <value>get date of last all publication in dictionary</value>
        </member>
        <member name="M:ResearchBase.ResearchTeamCollection`1.TimeFrameGroup(ResearchBase.TimeFrame)">
            <summary>
            research teams with so time frame
            </summary>
            <param name="value">so time frame</param>
            <returns>research teams with so time frame</returns>
        </member>
        <member name="P:ResearchBase.ResearchTeamCollection`1.GroupByTimeFrame">
            <value>get groups by TimeFrame</value>
        </member>
        <member name="T:ResearchBase.ResearchTeamEnumerator">
            <summary>
            Enumerator for search persons who have publications
            </summary>
        </member>
        <member name="M:ResearchBase.Team.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="_name">name of company</param>
            <param name="_registerNumber">number of register</param>
        </member>
        <member name="M:ResearchBase.Team.#ctor">
            <summary>
            default constructor Team("company", 100000)
            </summary>
        </member>
        <member name="P:ResearchBase.Team.Name">
            <value>get/set name of company</value>
        </member>
        <member name="P:ResearchBase.Team.RegisterNumber">
            <value>get/set register number of company</value>
            <exception cref="T:System.ArgumentException">value must be > 100000</exception>
        </member>
        <member name="M:ResearchBase.Team.DeepCopy">
            <summary>
            Copy by value
            </summary>
            <returns>object with common fields as this</returns>
        </member>
        <member name="M:ResearchBase.Team.Equals(System.Object)">
            <summary>
            return true (so they are equal) if this and obj are common by value
            </summary>
            <param name="obj">compared obj - should be Team-type</param>
            <returns>true if obj.type - Team and fields are common by value
            else false </returns>
        </member>
        <member name="M:ResearchBase.Team.op_Equality(ResearchBase.Team,System.Object)">
            <summary>
            compare by equals
            </summary>
            <param name="left"> left value</param>
            <param name="right"> right value </param>
            <returns>left.Equals(right)</returns>
        </member>
        <member name="M:ResearchBase.Team.op_Inequality(ResearchBase.Team,System.Object)">
            <summary>
            compare by unequals
            </summary>
            <param name="left"> left value</param>
            <param name="right"> right value </param>
            <returns>!(left.Equals(right))</returns>
        </member>
        <member name="M:ResearchBase.Team.GetHashCode">
            <summary>
            override GetHashCode
            </summary>
            <returns>(name).GetHashCode() + registerNumber.GetHashCode();</returns>
        </member>
        <member name="M:ResearchBase.Team.ToString">
            <summary>
            convert fields of person in string
            </summary>
            <returns>string with name, surname and birthdate </returns>
        </member>
        <member name="T:ResearchBase.TestCollection`2">
            <summary>
            Class for compare timesearch list and dictionary
            </summary>
            <typeparam name="TKey">dictionary's key</typeparam>
            <typeparam name="TValue">dictionary's value</typeparam>
        </member>
        <member name="M:ResearchBase.TestCollection`2.#ctor(System.Int32,ResearchBase.GenerateElement{`0,`1})">
            <summary>
            constructor
            </summary>
            <param name="n">count of objects in collection</param>
            <param name="generator">function-generator for elements in collection</param>
        </member>
        <member name="M:ResearchBase.TestCollection`2.SearchListTKey">
            <summary>
            search in list of keys
            </summary>
        </member>
        <member name="M:ResearchBase.TestCollection`2.SearchListString">
            <summary>
            search in list of string
            </summary>
        </member>
        <member name="M:ResearchBase.TestCollection`2.SearchDictTkey">
            <summary>
            serach in dictionary by key
            </summary>
        </member>
        <member name="M:ResearchBase.TestCollection`2.SearchDictString">
            <summary>
            serach in dictionary by string
            </summary>
        </member>
        <member name="M:ResearchBase.TestCollection`2.SearchDictValue">
            <summary>
            serach in dictionary by value
            </summary>
        </member>
    </members>
</doc>
